-- hey this is almost a real program now.
abstype Bool : T

extern var tt : Bool
extern var ff : Bool
extern var cond : forall b . (() -> b, () -> b, Bool) -> b

abstype Int : T

extern var zero : Int
extern var plus : (Int, Int) -> Int


abstype List : <T>T

extern var nil : forall a . () -> List(a)

extern var cons : forall a . (a, List(a)) -> List (a)

extern var foldl : forall a, b . ((a, b) -> b, b, List(a)) -> b

fun sumInt (xs : List(Bool)) : Int = 
  foldl (plus, zero, xs)
